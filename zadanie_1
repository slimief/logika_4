#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <string.h>
#include <locale.h>

struct Node {
	int data;
	struct Node* left;
	struct Node* right;
};
struct Node* root;
struct Node* CreateTree(struct Node* root, struct Node* r, int data) {
	if (r == NULL) {
		r = (struct Node*)malloc(sizeof(struct Node));
		if (r == NULL) {
			printf("Ошибка выделения памяти");
			exit(0);
		}
		r->left = NULL;
		r->right = NULL;
		r->data = data;
		if (root == NULL) return r;
		if (data > root->data)	
			root->right = r;
		else 
			root->left = r;
		return root;
	}
	if (data > r->data)
		CreateTree(r, r->right, data);
	else
		CreateTree(r, r->left, data);
	return root;
}
void print_tree(struct Node* r, int l) {
	if (r == NULL) {
		return;
	}
	print_tree(r->right, l + 1);
	for (int i = 0; i < l; i++) {
		printf(" ");
	}
	printf("%d\n", r->data);
	print_tree(r->left, l + 1);
}

// Функция для поиска значения в дереве
struct Node* searchTree(struct Node* r, int key) {
	// Базовый случай
	if (r == NULL || r->data == key)
		return r;

	// Если ключ меньше текущего, ищем в левом поддереве
	if (key < r->data)
		return searchTree(r->left, key);

	// Иначе ищем в правом поддереве
	return searchTree(r->right, key);
}

int main() {
	setlocale(LC_ALL, "");
	int D, start = 1;
	root = NULL;
	printf(" '-1' - окончание построения дерева\n");
	while (start) {
		printf("Введите число: ");
		scanf_s("%d", &D);
		if (D == -1) {
			printf("Построение дерева окончено\n\n");
			start = 0;
		}
		else
			root = CreateTree(root, root, D);
	}
	print_tree(root, 0);
	//поиск в дереве
	// Поисковая часть
	printf("Введите число для поиска в дереве: ");
	scanf("%d", &D);  // Изменил на scanf
	struct Node* result = searchTree(root, D);
	if (result != NULL) {
		printf("Элемент %d найден в дереве.\n", D);
	}
	else {
		printf("Элемент %d не найден в дереве.\n", D);
	}
	return 0;
}
